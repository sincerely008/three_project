
DROP TABLE MEMBER;

CREATE TABLE MEMBER(

	MEMBER_ID 				VARCHAR2(100) 	PRIMARY KEY,
	MEMBER_PW 			VARCHAR2(100) 	NOT NULL,
	MEMBER_NAME 		VARCHAR2(100) 	NOT NULL,
	MEMBER_BIRTH			VARCHAR2(500)	NOT NULL,
	MEMBER_ADDR 		VARCHAR2(500) 	NOT NULL,
	MEMBER_PHONE 		VARCHAR2(500) 	NOT NULL,
	MEMBER_EMAIL 		VARCHAR2(500) 	NOT NULL,
	MEMBER_ENABLED 	VARCHAR2(2) 		NOT NULL,
	MEMBER_GENDER		VARCHAR2(10)		NOT NULL,
	MEMBER_ROLE			VARCHAR2(100)	NOT NULL,
	MEMBER_REGDATE		DATE					NOT NULL,
	MEMBER_PWEVENT	DATE					NOT NULL,
	
	CONSTRAINT CHECK_MEMBER_ENABLED CHECK(MEMBER_ENABLED IN('Y','N'))
);

SELECT * FROM MEMBER
-----------------------------------------------------------------------------------------

DROP TABLE CATEGORY;
DROP SEQUENCE CATEGORYSEQ;

CREATE SEQUENCE CATEGORYSEQ;
CREATE TABLE CATEGORY(
	CATEGORY_NO				NUMBER			PRIMARY KEY,
	CATEGORY_NAME			VARCHAR2(500)		NOT NULL
);

SELECT * FROM CATEGORY
------------------------------------------------------------------------------------------

DROP TABLE PRODUCT;
DROP SEQUENCE PRODUCTSEQ;

CREATE SEQUENCE PRODUCTSEQ;	
CREATE TABLE PRODUCT(
	CATEGORY_NO			NUMBER				NOT NULL,
	PRODUCT_NO			NUMBER				PRIMARY KEY,
	PRODUCT_NAME		VARCHAR2(500)	NOT NULL,
	PRODUCT_STOCK		NUMBER				NOT NULL,
	PRODUCT_DETAILS		VARCHAR2(2000)	NOT NULL,
	PRODUCT_PRICE		NUMBER				NOT NULL,
	
	CONSTRAINT FK_PRODUCT_CATEGORY_NO FOREIGN KEY(CATEGORY_NO)
	REFERENCES CATEGORY(CATEGORY_NO)
);

SELECT * FROM PRODUCT
--------------------------------------------------------------------------------------------

DROP TABLE PAYMENT;
DROP SEQUENCE PAYMENTSEQ;

CREATE SEQUENCE PAYMENTSEQ;
CREATE TABLE PAYMENT(
		PAYMENT_NO				NUMBER				PRIMARY KEY,
		PAYMENT_GROUPNO		NUMBER				NOT NULL,
		MEMBER_ID					VARCHAR2(100)	NOT NULL,
		PRODUCT_NO				NUMBER				NOT NULL,
		PAYMENT_NAME			VARCHAR2(500)	NOT NULL,
		PAYMENT_PRICE			NUMBER				NOT NULL,
		PAYMENT_DATE			DATE					NOT NULL,
		PAYMENT_ADDR			VARCHAR2(500)	NOT NULL,
		
		CONSTRAINT FK_PAYMENT_MEMBER_ID FOREIGN KEY(MEMBER_ID)
		REFERENCES MEMBER(MEMBER_ID),
		CONSTRAINT FK_PAYMENT_PRODUCT_NO FOREIGN KEY(PRODUCT_NO)
		REFERENCES PRODUCT(PRODUCT_NO)
);

SELECT * FROM PAYMENT

------------------------------------------------------------------------------------------------

DROP TABLE BASKET;
DROP SEQUENCE BASKETSEQ;

CREATE SEQUENCE BASKETSEQ;
CREATE TABLE BASKET(
	MEMBER_ID				VARCHAR2(100)		NOT NULL,
	PRODUCT_NO			NUMBER					NOT NULL,
	BASKET_NO				NUMBER					PRIMARY KEY,
	BASKET_QUANTITY		NUMBER					NOT NULL,
	
	CONSTRAINT FK_BASKET_MEMBER_ID FOREIGN KEY(MEMBER_ID)
	REFERENCES MEMBER(MEMBER_ID),
	CONSTRAINT FK_BASKET_PRODUCT_NO FOREIGN KEY(PRODUCT_NO)
	REFERENCES PRODUCT(PRODUCT_NO)
);

SELECT * FROM BASKET

----------------------------------------------------------------------------------------------

DROP TABLE YOUTUBE;
DROP SEQUENCE YOUTUBESEQ;

CREATE SEQUENCE YOUTUBESEQ;
CREATE TABLE YOUTUBE(
	YOUTUBE_NO			NUMBER					PRIMARY KEY,
	YOUTUBE_URL			 VARCHAR2(2000)		NOT NULL
);

SELECT * FROM YOUTUBE
------------------------------------------------------------------------------------------------

DROP TABLE OTHER;

CREATE TABLE OTHER(
	PRODUCT_NO			NUMBER					NOT NULL,
	OTHER_SITE				VARCHAR2(500)		NOT NULL,
	OTHER_PRICE			NUMBER					NOT NULL,
	
	CONSTRAINT FK_OTHER_PRODUCT_NO FOREIGN KEY(PRODUCT_NO)
	REFERENCES PRODUCT(PRODUCT_NO)
);

SELECT * FROM OTHER

-----------------------------------------------------------------------------------------------

DROP SEQUENCE CHATTINGSEQ;
DROP TABLE CHATTING;

CREATE SEQUENCE CHATTINGSEQ;
CREATE TABLE CHATTING(
	CHATTING_NO				NUMBER			PRIMARY KEY,
	CHATTING_ADMIN			VARCHAR2(2)	NOT NULL,
	CHATTING_USER			VARCHAR2(2)	NOT NULL
);

SELECT * FROM CHATTING

----------------------------------------------------------------------------------------------

DROP SEQUENCE NOTESEQ;
DROP TABLE NOTE;

CREATE SEQUENCE NOTESEQ;
CREATE TABLE NOTE(
	NOTE_NO				NUMBER				PRIMARY KEY,
	NOTE_CONTENT		VARCHAR2(2000)	NOT NULL,
	NOTE_SEND				VARCHAR2(100)	NOT NULL,
	NOTE_GET				VARCHAR2(100)	NOT NULL,
	NOTE_DATE				DATE					NOT NULL,
	NOTE_CONFIRM		VARCHAR2(2)		NOT NULL,
	
	CONSTRAINT FK_NOTE_NOTE_SEND FOREIGN KEY(NOTE_SEND)
	REFERENCES MEMBER(MEMBER_ID),
	CONSTRAINT FK_NOTE_NOTE_GET FOREIGN KEY(NOTE_GET)
	REFERENCES MEMBER(MEMBER_ID)
);

SELECT * FROM NOTE